/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package viewChucNangChinh;

import Repository.KhachHangRepo;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import Model.KhachHang;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 *
 * @author Admin
 */
public class ViewKhachHang extends javax.swing.JPanel implements KhachHangRepo.KhachHangListener {

    private KhachHangRepo repository = KhachHangRepo.getInstance();
    private DefaultTableModel model;

    /**
     * Creates new form ViewPhieuGiamGia
     */
    public ViewKhachHang() {
        initComponents();
        repository.addListener(this);
        model = (DefaultTableModel) tblKhachHang.getModel();
        txtMa.setEnabled(false);
        loadDataToTable(); // Tải dữ liệu khi khởi tạo
    }

    @Override
    public void onKhachHangAdded(KhachHang kh) {
        loadDataToTable();
        JOptionPane.showMessageDialog(this, "Khách hàng mới đã được thêm: " + kh.getTenKhachHang());
    }

    private void loadDataToTable() {
        loadDataToTable(repository.layDanhSachKhachHang());
    }

    private void loadDataToTable(List<KhachHang> list) {
        model.setRowCount(0);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        for (KhachHang kh : list) {
            String ngaySinhStr = (kh.getNgaySinh() != null) ? sdf.format(kh.getNgaySinh()) : "";
            model.addRow(new Object[]{
                kh.getMaKhachHang(),
                kh.getTenKhachHang(),
                ngaySinhStr,
                kh.getSdt(),
                kh.isGioiTinh() ? "Nam" : "Nữ",
                kh.getEmail()
            });
        }
    }

    private KhachHang getFormData() {
        // Lấy dữ liệu từ form
        String ten = txtTenKhachHang.getText().trim(); // BẮT BUỘC NHẬP
        String sdt = txtSDT.getText().trim(); // BẮT BUỘC NHẬP
        String email = txtEmail.getText().trim(); // KHÔNG BẮT BUỘC
        boolean gioiTinh = rdoNam.isSelected(); // BẮT BUỘC CHỌN
        Date ngaySinh = txt_ns.getDate(); // KHÔNG BẮT BUỘC
        return new KhachHang(0, null, ten, sdt, email, gioiTinh, ngaySinh);
    }

    private int getIdFromMa(String maKhachHang) {
        return repository.getIdByMaKhachHang(maKhachHang);
    }

    private void fillFormFromSelectedRow() {
        int selectedRow = tblKhachHang.getSelectedRow();
        if (selectedRow >= 0) {
            txtMa.setText((String) tblKhachHang.getValueAt(selectedRow, 0)); // Hiển thị mã nhưng không sửa được
            txtTenKhachHang.setText((String) tblKhachHang.getValueAt(selectedRow, 1));
            String ngaySinhStr = (String) tblKhachHang.getValueAt(selectedRow, 2);
            if (!ngaySinhStr.isEmpty()) {
                try {
                    txt_ns.setDate(new SimpleDateFormat("yyyy-MM-dd").parse(ngaySinhStr));
                } catch (ParseException ex) {
                }
            } else {
                txt_ns.setDate(null);
            }
            txtSDT.setText((String) tblKhachHang.getValueAt(selectedRow, 3));
            String gioiTinh = (String) tblKhachHang.getValueAt(selectedRow, 4);
            if (gioiTinh.equals("Nam")) {
                rdoNam.setSelected(true);
            } else {
                rdoNu.setSelected(true);
            }
            txtEmail.setText((String) tblKhachHang.getValueAt(selectedRow, 5));
        }
    }

    private void lamMoiForm() {
        txtMa.setText(""); // Không cho nhập nhưng vẫn reset để trống
        txtTenKhachHang.setText("");
        txtSDT.setText("");
        txtEmail.setText("");
        txt_ns.setDate(null);
        buttonGroup1.clearSelection();
        txtSearch.setText("");
        loadDataToTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtMa = new javax.swing.JTextField();
        txtTenKhachHang = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        rdoNam = new javax.swing.JRadioButton();
        rdoNu = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtSDT = new javax.swing.JTextField();
        btnSua = new javax.swing.JButton();
        btnTimKiem = new javax.swing.JButton();
        btnLamMoi = new javax.swing.JButton();
        btnThem = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblKhachHang = new javax.swing.JTable();
        txt_ns = new com.toedter.calendar.JDateChooser();
        txtSearch = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("QUẢN LÍ KHÁCH HÀNG");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 14, -1, -1));

        jLabel2.setText("Mã : ");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, -1, -1));

        jLabel3.setText("Tên khách hàng");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 110, -1, -1));

        jLabel6.setText("Giới tính");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, -1, -1));
        add(txtMa, new org.netbeans.lib.awtextra.AbsoluteConstraints(132, 67, 188, -1));
        add(txtTenKhachHang, new org.netbeans.lib.awtextra.AbsoluteConstraints(132, 107, 188, -1));
        add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 150, 188, -1));

        buttonGroup1.add(rdoNam);
        rdoNam.setText("Nam");
        add(rdoNam, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, -1, -1));

        buttonGroup1.add(rdoNu);
        rdoNu.setText("Nữ");
        rdoNu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoNuActionPerformed(evt);
            }
        });
        add(rdoNu, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 160, -1, -1));

        jLabel8.setText("Số điện thoại");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 100, -1, -1));

        jLabel12.setText("Năm sinh");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 60, -1, -1));

        jLabel4.setText("Email");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 150, -1, -1));
        add(txtSDT, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 100, 188, -1));

        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });
        add(btnSua, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 210, -1, -1));

        btnTimKiem.setText("Tìm kiếm");
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });
        add(btnTimKiem, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 270, -1, -1));

        btnLamMoi.setText("Làm mới");
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });
        add(btnLamMoi, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 210, -1, -1));

        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });
        add(btnThem, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 210, -1, -1));

        tblKhachHang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã ", "Tên khách hàng", "Năm sinh", "Số điện thoại", "Giới tính", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblKhachHang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblKhachHangMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblKhachHang);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 742, 239));

        txt_ns.setDateFormatString("yyyy-MM-dd");
        add(txt_ns, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 60, 190, -1));

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 270, 400, 24));
    }// </editor-fold>//GEN-END:initComponents

    private void rdoNuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoNuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoNuActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed

        int selectedRow = tblKhachHang.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn khách hàng để sửa!");
            return;
        }
        try {
            KhachHang kh = getFormData();
            String sdtMoi = kh.getSdt();
            String sdtCu = (String) tblKhachHang.getValueAt(selectedRow, 3);

            if (kh.getTenKhachHang().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Tên khách hàng không được để trống!");
                return;
            }
            if (!isValidName(kh.getTenKhachHang())) {
                JOptionPane.showMessageDialog(this, "Tên khách hàng không được chứa ký tự đặc biệt hoặc số!");
                return;
            }
            if (sdtMoi.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Số điện thoại không được để trống!");
                return;
            }
            if (!isValidPhone(sdtMoi)) {
                JOptionPane.showMessageDialog(this, "Số điện thoại phải có 10 chữ số và bắt đầu bằng 0!");
                return;
            }
            if (!sdtMoi.equals(sdtCu) && repository.isPhoneNumberExists(sdtMoi)) {
                JOptionPane.showMessageDialog(this, "Số điện thoại đã tồn tại!");
                return;
            }
            if (!rdoNam.isSelected() && !rdoNu.isSelected()) {
                JOptionPane.showMessageDialog(this, "Vui lòng chọn giới tính!");
                return;
            }
            if (!kh.getEmail().isEmpty() && !isValidEmail(kh.getEmail())) {
                JOptionPane.showMessageDialog(this, "Email không đúng định dạng!");
                return;
            }

            int id = getIdFromMa((String) tblKhachHang.getValueAt(selectedRow, 0));
            if (id == -1) {
                JOptionPane.showMessageDialog(this, "Không tìm thấy khách hàng với mã: " + tblKhachHang.getValueAt(selectedRow, 0));
                return;
            }
            kh.setId(id);

            if (repository.suaKhachHang(kh)) {
                JOptionPane.showMessageDialog(this, "Sửa khách hàng thành công!");
                loadDataToTable();
                lamMoiForm();
            } else {
                JOptionPane.showMessageDialog(this, "Sửa khách hàng thất bại! Kiểm tra dữ liệu hoặc kết nối cơ sở dữ liệu.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnSuaActionPerformed
// Kiểm tra định dạng email, yêu cầu phải là gmail.com

    private boolean isValidEmail(String email) {
        String emailRegex = "^[A-Za-z0-9+_.-]+@gmail\\.com$";
        return email != null && email.matches(emailRegex);
    }

    // Kiểm tra tên không chứa ký tự đặc biệt và số, hỗ trợ tiếng Việt có dấu
    private boolean isValidName(String name) {
        // Regex hỗ trợ chữ cái tiếng Việt, khoảng trắng, không cho phép số và ký tự đặc biệt
        String nameRegex = "^[A-Za-zÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚÝàáâãèéêìíòóôõùúýĂăĐđĨĩŨũƠơƯưẠ-ỹ\\s]+$";
        return name != null && name.matches(nameRegex);
    }

// Kiểm tra định dạng số điện thoại (ví dụ: 10 số bắt đầu bằng 0)
    private boolean isValidPhone(String phone) {
        String phoneRegex = "^0[0-9]{9}$";
        return phone != null && phone.matches(phoneRegex);
    }
    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed

    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        lamMoiForm();
        loadDataToTable();
    }//GEN-LAST:event_btnLamMoiActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        try {
            KhachHang kh = getFormData();
            // Kiểm tra các trường bắt buộc
            if (kh.getTenKhachHang().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Tên khách hàng không được để trống!");
                return;
            }
            if (!isValidName(kh.getTenKhachHang())) {
                JOptionPane.showMessageDialog(this, "Tên khách hàng không được chứa ký tự đặc biệt hoặc số!");
                return;
            }
            if (kh.getSdt().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Số điện thoại không được để trống!");
                return;
            }
            if (!isValidPhone(kh.getSdt())) {
                JOptionPane.showMessageDialog(this, "Số điện thoại phải có 10 chữ số và bắt đầu bằng 0!");
                return;
            }
            if (repository.isPhoneNumberExists(kh.getSdt())) {
                JOptionPane.showMessageDialog(this, "Số điện thoại đã tồn tại!");
                return;
            }
            if (!rdoNam.isSelected() && !rdoNu.isSelected()) {
                JOptionPane.showMessageDialog(this, "Vui lòng chọn giới tính!");
                return;
            }
            // Email không bắt buộc, chỉ kiểm tra nếu có nhập
            if (!kh.getEmail().isEmpty() && !isValidEmail(kh.getEmail())) {
                JOptionPane.showMessageDialog(this, "Email không đúng định dạng!");
                return;
            }

            if (repository.themKhachHang(kh)) {
                JOptionPane.showMessageDialog(this, "Thêm khách hàng thành công!");
                loadDataToTable();
                lamMoiForm();
            } else {
                JOptionPane.showMessageDialog(this, "Thêm khách hàng thất bại!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
        }
    }//GEN-LAST:event_btnThemActionPerformed

    private void tblKhachHangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblKhachHangMouseClicked
        fillFormFromSelectedRow();
    }//GEN-LAST:event_tblKhachHangMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        String tuKhoa = txtSearch.getText().trim();
        List<KhachHang> danhSachTimKiem = repository.timKiemKhachHang(tuKhoa);
        this.loadDataToTable(danhSachTimKiem); // Gọi phương thức có tham số
    }//GEN-LAST:event_txtSearchKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rdoNam;
    private javax.swing.JRadioButton rdoNu;
    private javax.swing.JTable tblKhachHang;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtMa;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTenKhachHang;
    private com.toedter.calendar.JDateChooser txt_ns;
    // End of variables declaration//GEN-END:variables
}
